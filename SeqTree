from treelib import Node, Tree

class K_mer_data():
    def __init__(self, num_apperiacnces: int, indexes_list: list):
        self.num_apperiacnces = num_apperiacnces
        self.indexes_list = indexes_list

GENOME = 'AAATTTAAATT'
ALPHA_BETA = ['A', 'C', 'G', 'T']
# ALPHA_BETA = ['A', 'C', 'G', '1', 'W', 'V', 'P']
TREE_DEPTH = 3

tree = Tree()

tree.create_node("", "root", data=K_mer_data(0, []))  #root Node


for k_mer_first_index in range(0, len(GENOME) - TREE_DEPTH +1):
    k_mer = GENOME[k_mer_first_index: k_mer_first_index + TREE_DEPTH]
    for k in range(1, TREE_DEPTH+1):
        sub_k_mer = k_mer[0:k]
        if tree.get_node(sub_k_mer) == None:
            if tree.get_node(k_mer[0:k-1]) == None:
                tree.create_node(identifier = sub_k_mer, parent='root', data=K_mer_data(1, [(k_mer_first_index, k_mer_first_index + k-1)]))
            else:
                tree.create_node(identifier=sub_k_mer, parent=tree.get_node(k_mer[0:k-1]), data=K_mer_data(1, [(k_mer_first_index, k_mer_first_index + k - 1)]))
        else:
            k_mer_node = tree.get_node(sub_k_mer)
            k_mer_node.data.num_apperiacnces += 1
            k_mer_node.data.indexes_list.append((k_mer_first_index, k_mer_first_index + k - 1))

#adding the missing count at the last k-mer:
for current_depth in range(len(GENOME)-TREE_DEPTH+1, len(GENOME)):
    last_k_minus_one_mer = GENOME[current_depth:]
    for z in range(1, len(GENOME)-current_depth+1):
        if tree.get_node((last_k_minus_one_mer[0:z])) == None:
            if tree.get_node(last_k_minus_one_mer[0:z-1]) == None:
                tree.create_node(identifier = last_k_minus_one_mer[0:z], parent='root', data=K_mer_data((1), [(current_depth, current_depth + z-1)]))
            else:
                tree.create_node(identifier=last_k_minus_one_mer[0:z], parent=tree.get_node(k_mer[0:k-1]), data=K_mer_data(1, [(current_depth, current_depth + z-1)]))
        else:
            k_mer_node = tree.get_node(last_k_minus_one_mer[0:z])
            k_mer_node.data.num_apperiacnces += 1
            k_mer_node.data.indexes_list.append((current_depth, current_depth + z-1))

def frequncies_lst(TREE_DEPTH, tree):
    freq_lst = []
    for i in range(TREE_DEPTH):
        freq_lst.append([])
    for node in tree.all_nodes_itr():
         if not node.is_root():
             freq_lst[tree.depth(node)-1].append((node.identifier ,node.data.num_apperiacnces))
    for lst in range(len(freq_lst)):                                                              #Sorting each K-mer list by its frequncy
        freq_lst[lst] = sorted(freq_lst[lst], key=lambda x: x[1])
    return freq_lst


tree.show()
tree.show(data_property="num_apperiacnces")
print(frequncies_lst(TREE_DEPTH, tree))
