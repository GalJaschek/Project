from treelib import Tree


def create_tree_and_frequencies(genome, tree_depth):
    class k_mer_data():
        def __init__(self, num_appearances: int, indexes_list: list):
            self.num_appearances = num_appearances
            self.indexes_list = indexes_list

    def calc_frequencies_lst():
        freq_lst = []
        for i in range(tree_depth):
            freq_lst.append([])
        for node in tree.all_nodes_itr():
            if not node.is_root():
                freq_lst[tree.depth(node)-1].append((node.identifier, node.data.num_appearances))
        # Sorting each K-mer list by its frequency
        for lst in range(len(freq_lst)):
            freq_lst[lst] = sorted(freq_lst[lst], key=lambda x: x[1], reverse=True)
        return freq_lst

    def create_tree():
        tree = Tree()
        tree.create_node("", "root", data=k_mer_data(0, []))  #root Node

        for k_mer_first_index in range(0, len(genome)):
            k_mer_last_index = min(len(genome), k_mer_first_index + tree_depth)
            k_mer = genome[k_mer_first_index: k_mer_last_index]
            for k in range(1, len(k_mer) + 1):
                sub_k_mer = k_mer[0:k]
                if tree.get_node(sub_k_mer) is None:
                    if tree.get_node(k_mer[0:k - 1]) is None:
                        tree.create_node(identifier=sub_k_mer, parent='root', data=k_mer_data(1, [(k_mer_first_index, k_mer_first_index + k - 1)]))
                    else:
                        tree.create_node(identifier=sub_k_mer, parent=tree.get_node(k_mer[0:k-1]), data=k_mer_data(1, [(k_mer_first_index, k_mer_first_index + k - 1)]))
                else:
                    k_mer_node = tree.get_node(sub_k_mer)
                    if k_mer_node.data.indexes_list[-1][1] < k_mer_first_index:
                        k_mer_node.data.num_appearances += 1
                        k_mer_node.data.indexes_list.append((k_mer_first_index, k_mer_first_index + k - 1))
        return tree

    tree = create_tree()
    return tree, calc_frequencies_lst()
